<Window x:Class="bossdoyKaraoke_NOW.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:local="clr-namespace:bossdoyKaraoke_NOW"
        xmlns:tv="clr-namespace:bossdoyKaraoke_NOW.Media"
        xmlns:vm="clr-namespace:bossdoyKaraoke_NOW.ViewModel"
        Background="{DynamicResource MaterialDesignPaper}"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        mc:Ignorable="d"
       Title="MainWindow" Height="630" Width="820" MinWidth="820" MinHeight="630" Closing="Window_Closing">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="111*"/>
            <ColumnDefinition Width="295*"/>
        </Grid.ColumnDefinitions>
        <Menu IsMainMenu="True" Grid.ColumnSpan="2" VerticalAlignment="Top" >
            <MenuItem Header="_File">
                <MenuItem Header="Open">
                    <MenuItem.Icon>
                        <materialDesign:PackIcon Kind="File" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Add Folder" >
                    <MenuItem.Icon>
                        <materialDesign:PackIcon Kind="FolderOpen" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Preferences" >
                    <MenuItem.Icon>
                        <materialDesign:PackIcon Kind="Settings" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Exit" InputGestureText="Ctrl+E">
                    <MenuItem.Icon>
                        <materialDesign:PackIcon Kind="ExitToApp" />
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>
        <DockPanel Name="media_controls" Grid.ColumnSpan="2" VerticalAlignment="Top">
            <DockPanel.DataContext>
                <vm:MediaControls/>
            </DockPanel.DataContext>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding Loaded}" CommandParameter="{ Binding ElementName=media_controls}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Button Panel.ZIndex="1" Name="play_pause" Margin="10,54,0,0" Style="{StaticResource MaterialDesignFloatingActionAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                         Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" VerticalAlignment="Top" HorizontalAlignment="Left" >
                <materialDesign:PackIcon Kind="{Binding IconPlayPause}" Width="45" Height="45"/>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                        <i:InvokeCommandAction Command="{Binding PlayPauseCommand}" CommandParameter="{ Binding ElementName=play_pause}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
            <materialDesign:ColorZone Panel.ZIndex="0" Mode="PrimaryMid"  Margin="-28,50,0,0"  Grid.ColumnSpan="2"  BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" Foreground="#DDFFFFFF" BorderThickness="0,5" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" >
                <DockPanel Margin="24,7,0,7">
                    <StackPanel Name="audio_panel" Panel.ZIndex="1" Orientation="Horizontal"  HorizontalAlignment="Left">
                        <Button Name="play_next" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                        Content="{materialDesign:PackIcon  Kind=SkipNext ,Size=35 }" Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" BorderThickness="1" Background="#1F000000" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" Margin="6,5" />
                        <Button Name="volume_main" Panel.ZIndex="1" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" VerticalAlignment="Top" HorizontalAlignment="Left" >
                            <materialDesign:PackIcon Kind="{Binding IconMuteUnMute}" Width="35" Height="35"/>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding MuteUnMuteCommand}" CommandParameter="{ Binding ElementName=volume_main}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewMouseMove">
                                    <i:InvokeCommandAction Command="{Binding ShowVolumeControlCommand}" CommandParameter="{ Binding ElementName=volume_main}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <Button.ContextMenu>
                                <ContextMenu Width="150">
                                    <MenuItem>
                                        <MenuItem.Template>
                                            <ControlTemplate TargetType="{x:Type MenuItem}">
                                                <StackPanel Margin="5" >
                                                    <Slider  />
                                                </StackPanel>
                                            </ControlTemplate>
                                        </MenuItem.Template>
                                    </MenuItem>
                                </ContextMenu>
                            </Button.ContextMenu>
                        </Button>
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" BorderThickness="1" Background="#1F000000" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" Margin="6,5" />
                        <Button Name="remove_vocal" Panel.ZIndex="1" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Content="{materialDesign:PackIcon  Kind=Voice ,Size=30 }" Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" VerticalAlignment="Top" HorizontalAlignment="Left" />
                    </StackPanel>
                    <StackPanel Name="dual_screen_panel" Panel.ZIndex="2" Orientation="Horizontal">
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" BorderThickness="1" Background="#1F000000" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" Margin="6,5" />
                        <materialDesign:Badged Badge="0" x:Name="full_screen_count">
                            <Button Name="dual_Screen" Panel.ZIndex="1" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                            materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                            materialDesign:ButtonProgressAssist.Value="100"
                            materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                            Content="{materialDesign:PackIcon  Kind=MonitorMultiple ,Size=25 }" Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" VerticalAlignment="Top" HorizontalAlignment="Left" Click="dual_Screen_Click"/>
                        </materialDesign:Badged>
                    </StackPanel>
                    <StackPanel Name="tempo_key_panel" Panel.ZIndex="3" Orientation="Horizontal" HorizontalAlignment="Right" DockPanel.Dock="Right">
                        <StackPanel  Orientation="Vertical" HorizontalAlignment="Right" Margin="5,0" DockPanel.Dock="Right">
                            <Button Name="key_plus" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Content="{materialDesign:PackIcon  Kind=Plus ,Size=15 }" Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" HorizontalAlignment="Center" Height="18" VerticalAlignment="Top" Width="18" Padding="1">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                        <i:InvokeCommandAction Command="{Binding KeyPlusCommand}" CommandParameter="{ Binding ElementName=key_plus}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                            <Button Name="key_minus" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Content="{materialDesign:PackIcon  Kind=Minus ,Size=15 }" Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" HorizontalAlignment="Center" Height="18" VerticalAlignment="Bottom" Width="18" Padding="1" Margin="0,5,0,0">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                        <i:InvokeCommandAction Command="{Binding KeyMinusCommand}" CommandParameter="{ Binding ElementName=key_minus}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                        </StackPanel>
                        <StackPanel  Orientation="Vertical" HorizontalAlignment="Right"  DockPanel.Dock="Right" Margin="0,0,5,0">
                            <TextBlock VerticalAlignment="Center" Opacity="{Binding KeyTempoOpacity}" TextAlignment="Center"> Key</TextBlock>
                            <TextBlock VerticalAlignment="Center" Opacity="{Binding KeyTempoOpacity}" TextAlignment="Center" Text="{Binding Key}" FontWeight="Bold" />
                        </StackPanel>
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" BorderThickness="1" Background="#1F000000" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" Margin="0,5,5,5" />
                        <StackPanel  Orientation="Vertical" HorizontalAlignment="Right" Margin="5,0" DockPanel.Dock="Right">
                            <Button Name="tempo_plus" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Content="{materialDesign:PackIcon  Kind=Plus ,Size=15 }" Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" HorizontalAlignment="Center" Height="18" VerticalAlignment="Top" Width="18" Padding="1">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                        <i:InvokeCommandAction Command="{Binding TempoPlusCommand}" CommandParameter="{ Binding ElementName=tempo_plus}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                            <Button Name="tempo_minus" Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}" Background="#FF673AB7" BorderBrush="#FF673AB7"
                        materialDesign:ButtonProgressAssist.IsIndicatorVisible="True"
                        materialDesign:ButtonProgressAssist.Value="100"
                        materialDesign:ButtonProgressAssist.IndicatorBackground="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Content="{materialDesign:PackIcon  Kind=Minus ,Size=15 }" Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" HorizontalAlignment="Center" Height="18" VerticalAlignment="Bottom" Width="18" Padding="1" Margin="0,5,0,0" >
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                        <i:InvokeCommandAction Command="{Binding TempoMinusCommand}" CommandParameter="{ Binding ElementName=tempo_minus}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Button>
                        </StackPanel>
                        <StackPanel  Orientation="Vertical" HorizontalAlignment="Right"  DockPanel.Dock="Right" Margin="0,0,5,0">
                            <TextBlock VerticalAlignment="Center" Opacity="{Binding KeyTempoOpacity}" TextAlignment="Center">Tmp</TextBlock>
                            <TextBlock VerticalAlignment="Center" Opacity="{Binding KeyTempoOpacity}" TextAlignment="Center" Text="{Binding Tempo}" FontWeight="Bold" Width="29"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Name="song_info_panel" Panel.ZIndex="4" Orientation="Vertical" DockPanel.Dock="Right" Margin="5,0,0,0" >
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"  >
                            <TextBlock  VerticalAlignment="Bottom" HorizontalAlignment="Center"
                                   Text="{Binding ElapsedTime}"/>
                            <StackPanel Orientation="Vertical" Width="325">
                                <TextBlock Margin="16,0" FontWeight="Bold" FontSize="16" VerticalAlignment="Top" HorizontalAlignment="Center"
                                   Text="{Binding SongTitle}" TextWrapping="Wrap" />
                                <TextBlock Margin="16,0" VerticalAlignment="Center" HorizontalAlignment="Center"
                                   Text="{Binding SongArtist}" TextWrapping="Wrap"/>
                            </StackPanel>
                            <TextBlock VerticalAlignment="Bottom" HorizontalAlignment="Center"
                                   Text="{Binding RemainingTime}"/>
                        </StackPanel>
                        <ProgressBar Value="{Binding ProgressValue}" Width="410" HorizontalContentAlignment="Center" Maximum="2000" />
                    </StackPanel>
                </DockPanel>
            </materialDesign:ColorZone>
        </DockPanel>
        <Grid Name="media_grid" Margin="0,114,0,0" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="250" MaxWidth="350"/>
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="35*" />
                <ColumnDefinition Width="58*"/>
            </Grid.ColumnDefinitions>
            <TreeView ItemsSource="{Binding ItemSource}" x:Name="treeViewMenu" MinWidth="250" MinHeight="413" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" FontSize="13">
                <TreeView.DataContext>
                    <vm:TreeViewModel/>
                </TreeView.DataContext>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding Loaded}" CommandParameter="{ Binding ElementName=treeViewMenu}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TreeView.Resources>
                    <HierarchicalDataTemplate DataType="{x:Type vm:TreeViewModel}" ItemsSource="{Binding Items}">
                        <StackPanel Orientation="Horizontal" Margin="0 0 0 0" Background="Transparent">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction 
                                        Command="{Binding SelectionChangedCommand}"
                                        CommandParameter="{Binding}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <materialDesign:PackIcon Kind="{Binding PackIconKind}" Foreground="{Binding Foreground}"/>
                            <TextBlock Text="{Binding Title}" Foreground="{Binding Foreground}" FontWeight="Bold" Margin="8 0 0 0"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                    <DataTemplate DataType="{x:Type vm:TreeViewModelChild}">
                        <StackPanel Orientation="Horizontal" Margin="0 0 0 0" Background="Transparent">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction Command="{Binding SelectionChangedCommand}" CommandParameter="{Binding}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <materialDesign:PackIcon Kind="{Binding PackIconKind}" Foreground="{Binding Foreground}"/>
                            <TextBlock Text="{Binding Title}" Foreground="{Binding Foreground}" Margin="8 0 0 0"/>
                            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}" Value="0" IsIndeterminate="True" Visibility="{Binding IsProgressVisible}"  Margin="8 0 0 0" />
                        </StackPanel>
                    </DataTemplate>
                    <ContextMenu x:Key="tvItemContextMenu">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Opened">
                                <i:InvokeCommandAction 
                                    Command="{Binding RelativeSource={RelativeSource AncestorType=TreeView}, Path=DataContext.ContextMenuLoaded}" 
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <MenuItem Header="Empty queue" >
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="DeleteOutline"/>
                            </MenuItem.Icon>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction 
                                    Command="{Binding RelativeSource={RelativeSource AncestorType=TreeView}, Path=DataContext.EmptyQueueCommand}" 
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </MenuItem>
                        <MenuItem Header="Shuffle" >
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="ShuffleVariant"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="Favorites" >
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="FavoriteOutline"/>
                            </MenuItem.Icon>
                            <MenuItem Header="Add favorites to Songs Queue" >
                                <MenuItem.Icon>
                                    <materialDesign:PackIcon Kind="Add"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Create favorites" >
                                <MenuItem.Icon>
                                    <materialDesign:PackIcon Kind="Create"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Create favorites from played songs" >
                                <MenuItem.Icon>
                                    <materialDesign:PackIcon Kind="Create"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="Remove" >
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="DeleteForeverOutline"/>
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                        <Setter Property="ContextMenu" Value="{StaticResource tvItemContextMenu}" />
                    </Style>
                </TreeView.ItemContainerStyle>
            </TreeView>
            <GridSplitter Grid.Column="1" Width="4" HorizontalAlignment="Stretch" MinHeight="415" />
            <DockPanel Grid.Column="2" Height="220" Background="Black" Grid.ColumnSpan="2" VerticalAlignment="Top" Margin="0" >
                <WindowsFormsHost Name="main_video_screen" Width="390" Height="220"  Background="Black" HorizontalAlignment="Center" >
                    <!--<videoControl:D2dImageSource x:Name="main_screen_video"></videoControl:D2dImageSource>-->
                </WindowsFormsHost>
            </DockPanel>
            <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderThickness="0,1" Grid.Column="2" Height="41" Margin="0,220,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                <!--Background="#FF673AB7"-->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <materialDesign:PackIcon Kind="Search" VerticalContentAlignment="Bottom" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0,10,0,0" Padding="0" />
                    <TextBox x:Name="search_box" materialDesign:HintAssist.Hint="Search By Title/Artist" Style="{StaticResource MaterialDesignFloatingHintTextBox}" Margin="4,0,9,0" TextWrapping="Wrap" Width="212" VerticalContentAlignment="Bottom" HorizontalContentAlignment="Stretch" VerticalAlignment="Top" Padding="1,0" HorizontalAlignment="Right"/>
                </StackPanel>
            </Border>
            <ListView ItemsSource="{Binding Items}"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.CanContentScroll="True"
                      x:Name="songs_listView" Grid.Column="2" Margin="0,261,0,0" HorizontalContentAlignment="Center" Grid.ColumnSpan="2">
                <ListView.DataContext>
                    <vm:ListViewModel/>
                </ListView.DataContext>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseDoubleClick">
                        <i:InvokeCommandAction 
                            Command="{Binding PreviewMouseDoubleClick}"
                            CommandParameter="{Binding ElementName=songs_listView, Path=SelectedItem}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction 
                            Command="{Binding Loaded}" 
                            CommandParameter="{ Binding ElementName=songs_listView}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ListView.View>
                    <GridView AllowsColumnReorder="False">
                        <GridViewColumn Header="ID#" DisplayMemberBinding="{Binding ID }"/>
                        <GridViewColumn Header="Title" Width="234" DisplayMemberBinding="{Binding Name}"/>
                        <GridViewColumn Header="Artist"  Width="136" DisplayMemberBinding="{Binding Artist}"/>
                        <GridViewColumn Header="Duration" DisplayMemberBinding="{Binding Duration}"/>
                        <GridViewColumn Header="" Width="0" DisplayMemberBinding="{Binding FilePath}"/>
                    </GridView>
                </ListView.View>
                <ListView.Resources>
                    <ContextMenu x:Key="lvItemContextMenu">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Opened">
                                <i:InvokeCommandAction 
                                        Command="{Binding RelativeSource={RelativeSource AncestorType=ListView}, Path=DataContext.ContextMenuLoaded}" 
                                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <MenuItem Header="Play">
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="Play"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="Add to queue">
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="PlaylistAdd"/>
                            </MenuItem.Icon>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction
                                        Command="{Binding RelativeSource={RelativeSource AncestorType=ListView}, Path=DataContext.AddToQueueClick}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ListView}, Path=SelectedItem}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </MenuItem>
                        <MenuItem Header="Add to queue as next" >
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="PlaylistPlus"/>
                            </MenuItem.Icon>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction
                                        Command="{Binding RelativeSource={RelativeSource AncestorType=ListView}, Path=DataContext.AddToQueueAsNextClick}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ListView}, Path=SelectedItem}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="Remove from queue">
                            <MenuItem.Icon>
                                <materialDesign:PackIcon Kind="DeleteForeverOutline"/>
                            </MenuItem.Icon>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                    <i:InvokeCommandAction
                                        Command="{Binding RelativeSource={RelativeSource AncestorType=ListView}, Path=DataContext.RemoveFromQueueClick}"
                                        CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ListView}, Path=SelectedItem}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </MenuItem>
                    </ContextMenu>
                </ListView.Resources>
                <ListView.ItemContainerStyle>
                    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource MaterialDesignGridViewItem}">
                        <Setter Property="ContextMenu" Value="{StaticResource lvItemContextMenu}" />
                    </Style>
                </ListView.ItemContainerStyle>
            </ListView>
        </Grid>
        <!--<StackPanel x:Name="volume_control" HorizontalAlignment="Left" Height="239" Margin="130,105,0,0" VerticalAlignment="Top" Width="68" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>-->
    </Grid>
</Window>
